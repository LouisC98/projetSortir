<!-- En-tête de la conversation -->
<div class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-700 dark:to-gray-800 px-6 py-4 border-b border-gray-200 dark:border-gray-700 shadow-sm">
    <div class="flex items-center justify-between">
        <div class="flex items-center gap-4">
            {% if conversation.type == 'private' %}
                {% set otherUser = null %}
                {% for participant in conversation.participants %}
                    {% if participant.id != app.user.id %}
                        {% set otherUser = participant %}
                    {% endif %}
                {% endfor %}

                {% if otherUser %}
                    <a href="{{ path('view_user_profil', {id: otherUser.id}) }}" class="flex items-center gap-3 hover:opacity-80 transition-opacity group">
                        <div class="relative">
                            <img src="{% if otherUser.photoFilename %}{{ asset('uploads/photos/' ~ otherUser.photoFilename) }}{% else %}{{ asset('images/Avatar.png') }}{% endif %}"
                                 alt="Photo"
                                 class="w-14 h-14 rounded-full object-cover border-3 border-blue-300 dark:border-gray-600 shadow-md group-hover:border-blue-400 transition-all duration-200">
                            <div class="absolute bottom-0 right-0 w-4 h-4 bg-green-500 border-2 border-white dark:border-gray-700 rounded-full"></div>
                        </div>
                        <div>
                            <h2 class="text-xl font-bold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">{{ otherUser.pseudo }}</h2>
                            <p class="text-sm text-gray-600 dark:text-gray-400">{{ otherUser.firstName }} {{ otherUser.lastName }}</p>
                        </div>
                    </a>
                {% endif %}
            {% else %}
                <div class="flex items-center gap-3 flex-1">
                    <div class="w-14 h-14 rounded-full bg-gradient-to-br from-purple-500 via-indigo-600 to-blue-600 flex items-center justify-center text-white shadow-lg">
                        <svg class="w-7 h-7"  viewBox="0 0 20 20">
                            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z"></path>
                        </svg>
                    </div>
                    <div class="flex-1">
                        <h2 class="text-xl font-bold text-gray-900 dark:text-white">{{ conversation.name }}</h2>
                        <p class="text-sm text-purple-600 dark:text-purple-400 font-medium">
                            <svg class="w-4 h-4 inline-block mr-1"  viewBox="0 0 20 20">
                                <path d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z"></path>
                            </svg>
                            {{ conversation.participants|length }} participants
                        </p>

                        <!-- Liste des membres du groupe -->
                        <div class="flex items-center gap-1 mt-2 flex-wrap">
                            {% for participant in conversation.participants|slice(0, 5) %}
                                <a href="{{ path('view_user_profil', {id: participant.id}) }}"
                                   class="group relative"
                                   title="{{ participant.pseudo }}">
                                    <img src="{% if participant.photoFilename %}{{ asset('uploads/photos/' ~ participant.photoFilename) }}{% else %}{{ asset('images/Avatar.png') }}{% endif %}"
                                         alt="{{ participant.pseudo }}"
                                         class="w-8 h-8 rounded-full object-cover border-2 border-white dark:border-gray-700 shadow-sm hover:scale-110 transition-transform duration-200">
                                    <span class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs font-medium text-white bg-gray-900 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10">
                                        {{ participant.pseudo }}
                                    </span>
                                </a>
                            {% endfor %}
                            {% if conversation.participants|length > 5 %}
                                <div class="w-8 h-8 rounded-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center text-xs font-bold text-gray-700 dark:text-gray-300 border-2 border-white dark:border-gray-700 shadow-sm">
                                    +{{ conversation.participants|length - 5 }}
                                </div>
                            {% endif %}
                        </div>
                    </div>
                </div>
            {% endif %}
        </div>

        <!-- Boutons d'action -->
        <div class="flex items-center gap-2">
            <button class="p-2 rounded-full hover:bg-blue-100 dark:hover:bg-gray-600 transition-colors duration-200" title="Rechercher dans la conversation">
                <svg class="w-5 h-5 text-gray-600 dark:text-gray-300"  stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
            </button>
            <button class="p-2 rounded-full hover:bg-blue-100 dark:hover:bg-gray-600 transition-colors duration-200" title="Informations">
                <svg class="w-5 h-5 text-gray-600 dark:text-gray-300"  stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </button>
        </div>
    </div>
</div>

<!-- Zone de messages -->
<div class="bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-950 px-6 py-4 overflow-y-auto scroll-smooth" style="height: calc(700px - 81px - 85px);" id="messagesContainer">
    <div id="messagesList" class="space-y-6">
        {% for message in conversation.messages %}
            <div class="flex {% if message.sender.id == app.user.id %}justify-end{% else %}justify-start{% endif %} message-item animate-fade-in" data-message-id="{{ message.id }}">
                <div class="max-w-xs lg:max-w-md xl:max-w-lg">
                    {% if message.sender.id != app.user.id %}
                        <div class="flex items-center gap-2 mb-2">
                            <a href="{{ path('view_user_profil', {id: message.sender.id}) }}" class="flex items-center gap-2 hover:opacity-80 transition-opacity">
                                <img src="{% if message.sender.photoFilename %}{{ asset('uploads/photos/' ~ message.sender.photoFilename) }}{% else %}{{ asset('images/Avatar.png') }}{% endif %}"
                                     alt="Photo"
                                     class="w-8 h-8 rounded-full object-cover border-2 border-gray-300 dark:border-gray-600 shadow-sm">
                                <span class="text-sm font-semibold text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                                    {{ message.sender.pseudo }}
                                </span>
                            </a>
                        </div>
                    {% endif %}

                    <div class="message-content {% if message.sender.id == app.user.id %}bg-gradient-to-br from-blue-500 to-blue-600 text-white rounded-l-2xl rounded-br-2xl shadow-lg{% else %}bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-r-2xl rounded-bl-2xl shadow-md border border-gray-200 dark:border-gray-700{% endif %} px-4 py-3 hover:shadow-xl transition-all duration-200">
                        <p class="whitespace-pre-wrap break-words text-[15px] leading-relaxed">{{ message.content }}</p>
                    </div>

                    <div class="flex items-center gap-3 mt-1.5 {% if message.sender.id == app.user.id %}justify-end{% endif %}">
                        <span class="text-xs text-gray-500 dark:text-gray-400 font-medium">
                            {{ message.createdAt|date('H:i') }}
                            {% if message.isEdited %}
                                <span class="italic ml-1">• modifié</span>
                            {% endif %}
                        </span>

                        {% if message.sender.id == app.user.id %}
                            <div class="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                                <button class="edit-message-btn text-xs text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium transition-colors flex items-center gap-1" data-message-id="{{ message.id }}">
                                    <svg class="w-3 h-3"  stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                    </svg>
                                    Modifier
                                </button>
                                <button class="delete-message-btn text-xs text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 font-medium transition-colors flex items-center gap-1" data-message-id="{{ message.id }}">
                                    <svg class="w-3 h-3"  stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                    </svg>
                                    Supprimer
                                </button>
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
</div>

<!-- Zone de saisie -->
<div class="bg-white dark:bg-gray-800 px-6 py-4 border-t-2 border-gray-200 dark:border-gray-700 shadow-lg">
    <form id="messageForm" class="flex gap-3" data-turbo="false">
        <input type="hidden" id="conversationId" value="{{ conversation.id }}">
        <div class="flex-1 relative">
            <textarea id="messageInput"
                      rows="1"
                      placeholder="Tapez votre message... (Entrée pour envoyer, Maj+Entrée pour nouvelle ligne)"
                      class="w-full px-4 py-3 pr-12 border-2 border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white resize-none transition-all duration-200 hover:border-blue-400 dark:hover:border-blue-500"
                      style="max-height: 120px;"></textarea>
            <button type="button" class="absolute right-3 top-3 p-1.5 rounded-full hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors" title="Ajouter un emoji">
                <svg class="w-5 h-5 text-gray-500 dark:text-gray-400"  stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </button>
        </div>
        <button type="submit"
                class="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 shadow-md hover:shadow-xl transform hover:scale-105 active:scale-95 transition-all duration-200 flex items-center gap-2 font-medium">
            <span class="hidden sm:inline">Envoyer</span>
            <svg class="w-5 h-5"  stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
        </button>
    </form>
</div>

<script>
// Ce script est exécuté quand le contenu de conversation est chargé dynamiquement
(function() {
    const conversationId = document.getElementById('conversationId')?.value;
    if (!conversationId) return;

    const messagesContainer = document.getElementById('messagesContainer');
    const messagesList = document.getElementById('messagesList');
    const messageForm = document.getElementById('messageForm');
    const messageInput = document.getElementById('messageInput');
    const submitBtn = messageForm ? messageForm.querySelector('button[type="submit"]') : null;

    if (!messageForm || !messageInput) return;

    // Empêche l'initialisation multiple lorsque le partial est réinséré (Turbo, fetch, etc.)
    if (messageForm.dataset.chatInit === 'true') {
        // S'assure simplement de scroller en bas si nécessaire et on quitte
        if (messagesContainer) messagesContainer.scrollTop = messagesContainer.scrollHeight;
        return;
    }
    messageForm.dataset.chatInit = 'true';

    // Gestion de la touche Entrée
    messageInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            messageForm.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true }));
        }
    });

    // Auto-resize textarea
    messageInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
    });

    // Scroll to bottom
    function scrollToBottom() {
        if (messagesContainer) {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
    }
    scrollToBottom();

    // Send message
    messageForm.addEventListener('submit', function(e) {
        e.preventDefault();

        // Si un envoi est déjà en cours, on ignore
        if (submitBtn && submitBtn.disabled) return;

        const content = messageInput.value.trim();
        if (!content) return;

        // Désactive le bouton pour éviter les envois multiples
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.classList.add('opacity-60', 'cursor-not-allowed');
        }

        fetch(`/chat/message/send/${conversationId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `content=${encodeURIComponent(content)}`
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                messageInput.value = '';
                messageInput.style.height = 'auto';
                addMessageToList(data.message);
                scrollToBottom();
            } else if (data.error) {
                alert('Erreur: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            alert('Erreur lors de l\'envoi du message');
        })
        .finally(() => {
            // Réactive le bouton après fin de la requête
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.classList.remove('opacity-60', 'cursor-not-allowed');
            }
        });
    });

    // Add message to list
    function addMessageToList(message) {
        const isOwn = message.sender.id === {{ app.user.id }};
        const messageDiv = document.createElement('div');
        messageDiv.className = `flex ${isOwn ? 'justify-end' : 'justify-start'} message-item animate-fade-in`;
        messageDiv.dataset.messageId = message.id;

        const photoSrc = message.sender.photo ? `/uploads/photos/${message.sender.photo}` : '/images/Avatar.png';

        messageDiv.innerHTML = `
            <div class="max-w-xs lg:max-w-md xl:max-w-lg">
                ${!isOwn ? `
                    <div class="flex items-center gap-2 mb-2">
                        <a href="/profil/${message.sender.id}" class="flex items-center gap-2 hover:opacity-80 transition-opacity">
                            <img src="${photoSrc}" alt="Photo" class="w-8 h-8 rounded-full object-cover border-2 border-gray-300 dark:border-gray-600 shadow-sm">
                            <span class="text-sm font-semibold text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                                ${escapeHtml(message.sender.pseudo)}
                            </span>
                        </a>
                    </div>
                ` : ''}

                <div class="message-content ${isOwn ? 'bg-gradient-to-br from-blue-500 to-blue-600 text-white rounded-l-2xl rounded-br-2xl shadow-lg' : 'bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-r-2xl rounded-bl-2xl shadow-md border border-gray-200 dark:border-gray-700'} px-4 py-3 hover:shadow-xl transition-all duration-200">
                    <p class="whitespace-pre-wrap break-words text-[15px] leading-relaxed">${escapeHtml(message.content)}</p>
                </div>

                <div class="flex items-center gap-3 mt-1.5 ${isOwn ? 'justify-end' : ''}">
                    <span class="text-xs text-gray-500 dark:text-gray-400 font-medium">
                        ${message.createdAt}
                    </span>
                    ${isOwn ? `
                        <div class="opacity-0 group-hover:opacity-100 transition-opacity flex items-center gap-2">
                            <button class="edit-message-btn text-xs text-blue-600 dark:text-blue-400 hover:text-blue-700 font-medium transition-colors flex items-center gap-1" data-message-id="${message.id}">
                                <svg class="w-3 h-3"  stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                </svg>
                                Modifier
                            </button>
                            <button class="delete-message-btn text-xs text-red-600 dark:text-red-400 hover:text-red-700 font-medium transition-colors flex items-center gap-1" data-message-id="${message.id}">
                                <svg class="w-3 h-3"  stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                                Supprimer
                            </button>
                        </div>
                    ` : ''}
                </div>
            </div>
        `;

        messagesList.appendChild(messageDiv);
        attachMessageHandlers(messageDiv);
    }

    // Attach message handlers (edit/delete)
    function attachMessageHandlers(messageElement) {
        // Empêche le rattachement multiple des écouteurs sur le même élément
        if (messageElement.dataset.handlersAttached === 'true') return;

        const editBtn = messageElement.querySelector('.edit-message-btn');
        const deleteBtn = messageElement.querySelector('.delete-message-btn');

        if (editBtn) {
            editBtn.addEventListener('click', async () => {
                const messageId = editBtn.dataset.messageId;
                const messageContentDiv = messageElement.querySelector('.message-content');
                const contentElement = messageElement.querySelector('.message-content p');
                const currentContent = contentElement.textContent;

                // Créer le mode édition inline
                const editForm = document.createElement('div');
                editForm.className = `message-content ${messageContentDiv.className}`;
                editForm.innerHTML = `
                    <textarea class="w-full bg-transparent border-2 border-blue-300 dark:border-blue-500 rounded-lg px-2 py-1 text-inherit focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                              style="min-height: 60px;">${escapeHtml(currentContent)}</textarea>
                    <div class="flex gap-2 mt-2">
                        <button class="save-edit-btn px-3 py-1 bg-green-500 hover:bg-green-600 text-white rounded-lg text-xs font-medium transition-colors flex items-center gap-1">
                            <svg class="w-3 h-3"  stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                            Enregistrer
                        </button>
                        <button class="cancel-edit-btn px-3 py-1 bg-gray-500 hover:bg-gray-600 text-white rounded-lg text-xs font-medium transition-colors">
                            Annuler
                        </button>
                    </div>
                `;

                // Remplacer le contenu par le formulaire
                const originalContent = messageContentDiv.cloneNode(true);
                messageContentDiv.replaceWith(editForm);

                const textarea = editForm.querySelector('textarea');
                const saveBtn = editForm.querySelector('.save-edit-btn');
                const cancelBtn = editForm.querySelector('.cancel-edit-btn');

                // Auto-focus et sélection
                textarea.focus();
                textarea.setSelectionRange(textarea.value.length, textarea.value.length);

                // Auto-resize textarea
                textarea.style.height = 'auto';
                textarea.style.height = (textarea.scrollHeight) + 'px';
                textarea.addEventListener('input', function() {
                    this.style.height = 'auto';
                    this.style.height = (this.scrollHeight) + 'px';
                });

                // Enregistrer les modifications
                saveBtn.addEventListener('click', async () => {
                    const newContent = textarea.value.trim();
                    if (newContent && newContent !== currentContent) {
                        try {
                            const response = await fetch(`/chat/message/edit/${messageId}`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                                body: `content=${encodeURIComponent(newContent)}`
                            });
                            const data = await response.json();
                            if (data.success) {
                                originalContent.querySelector('p').textContent = data.message.content;
                                editForm.replaceWith(originalContent);
                                const timeElement = messageElement.querySelector('.text-xs');
                                if (timeElement && !timeElement.querySelector('.italic')) {
                                    timeElement.innerHTML += ' <span class="italic ml-1">• modifié</span>';
                                }
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Erreur lors de la modification du message');
                        }
                    } else if (!newContent) {
                        alert('Le message ne peut pas être vide');
                    } else {
                        editForm.replaceWith(originalContent);
                    }
                });

                // Annuler l'édition
                cancelBtn.addEventListener('click', () => {
                    editForm.replaceWith(originalContent);
                });

                // Enregistrer avec Ctrl+Enter ou Cmd+Enter, Annuler avec Escape
                textarea.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
                        e.preventDefault();
                        saveBtn.click();
                    } else if (e.key === 'Escape') {
                        e.preventDefault();
                        cancelBtn.click();
                    }
                });
            });
        }

        if (deleteBtn) {
            deleteBtn.addEventListener('click', async () => {
                const messageId = deleteBtn.dataset.messageId;
                if (confirm('Êtes-vous sûr de vouloir supprimer ce message ?')) {
                    try {
                        const response = await fetch(`/chat/message/delete/${messageId}`, { method: 'POST' });
                        const data = await response.json();
                        if (data.success) {
                            messageElement.remove();
                        }
                    } catch (error) {
                        console.error('Error:', error);
                    }
                }
            });
        }

        // Marque l'élément comme initialisé pour éviter de rattacher plusieurs fois
        messageElement.dataset.handlersAttached = 'true';
    }

    // Attach handlers to existing messages
    document.querySelectorAll('.message-item').forEach(attachMessageHandlers);

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
})();
</script>

<style>
@keyframes fade-in {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.animate-fade-in {
    animation: fade-in 0.3s ease-out;
}

.message-item:hover .opacity-0 {
    opacity: 1;
}

/* Scrollbar personnalisée */
#messagesContainer::-webkit-scrollbar {
    width: 8px;
}

#messagesContainer::-webkit-scrollbar-track {
    background: transparent;
}

#messagesContainer::-webkit-scrollbar-thumb {
    background: rgba(156, 163, 175, 0.5);
    border-radius: 4px;
}

#messagesContainer::-webkit-scrollbar-thumb:hover {
    background: rgba(156, 163, 175, 0.7);
}

/* Dark mode scrollbar */
.dark #messagesContainer::-webkit-scrollbar-thumb {
    background: rgba(75, 85, 99, 0.5);
}

.dark #messagesContainer::-webkit-scrollbar-thumb:hover {
    background: rgba(75, 85, 99, 0.7);
}
</style>
